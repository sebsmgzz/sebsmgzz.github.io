"use strict";
function hyperscript(nodeName, attributes, children) {
    children = [].concat.apply([], children);
    return { nodeName: nodeName, attributes: attributes, children: children };
}
function render(vdom) {
    var dom = document.createElement(vdom.nodeName);
    for (var _i = 0, _a = (vdom.attributes || {}); _i < _a.length; _i++) {
        var key = _a[_i];
        dom.setAttribute(key, vdom.attributes[key]);
    }
    for (var _b = 0, _c = vdom.children; _b < _c.length; _b++) {
        var child = _c[_b];
        if (typeof child === 'string') {
            dom.appendChild(document.createTextNode(child));
        }
        else {
            dom.appendChild(render(child));
        }
    }
    return dom;
}
var Utilities = /** @class */ (function () {
    function Utilities() {
    }
    /**
     * Returns the name of the month with the given numeric representation.
     * @param index {number} The one-based of the month to return.
     * @returns {string} The name of the month.
     */
    Utilities.getMonthName = function (index) {
        var x = Utilities.months[index];
        return x;
    };
    /**
     * Applies the given function to all the items in a list.
     * @param T The type of the given list.
     * @param items {T} The list over which to iterate.
     * @param mergeItem {(T): string} A function that translates tehe given item to a string representation.
     * @returns {string} All the items's strings generated by the given method, concatenated.
     */
    Utilities.mergeItems = function (items, mergeItem) {
        var answer = "";
        for (var i = 0; i < items.length; i++) {
            answer += mergeItem(items[i]);
        }
        return answer;
    };
    /**
     * @deprecated Do not use this
     * Sets the current page.
     * @param index {number} The index of the page to activate.
     */
    Utilities.setCurrentPage = function (index) {
        var pages = document.querySelectorAll("main > div");
        for (var i = 0; i < pages.length; i++) {
            pages[i].classList.add("hidden-content");
            if (i == index) {
                pages[i].classList.remove("hidden-content");
            }
        }
        var navbar = document.querySelector(".navbar-collapse");
        //navbar.collapse("hide");
    };
    /** @field Represents the month's name on a year. */
    Utilities.months = [
        "",
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ];
    return Utilities;
}());
var CertificatesTable;
(function (CertificatesTable) {
    function Select(index) {
        return entries[index];
    }
    CertificatesTable.Select = Select;
    function Count() {
        return entries.length;
    }
    CertificatesTable.Count = Count;
    var entries = [
        {
            name: "C# Programming for Unity Game Development Specialization",
            date: new Date(2020, 8),
            path: "documents/unity-specialization-credential.pdf",
            image_id: 0,
            issuers_id: [0, 1]
        },
        {
            name: "Mechanic Electrics Bachelor Degree",
            date: new Date(2020, 6),
            path: "https://certificados.tec.mx/certificate/69ccbba2f58e5df9b67df73f2f6d57a9",
            image_id: 1,
            issuers_id: [2]
        },
        {
            name: "IT Fundamentals for Cybersecurity Specialization",
            date: new Date(2020, 6),
            path: "documents/cybersecurity-specialization-credential.pdf",
            image_id: 2,
            issuers_id: [3, 1]
        },
        {
            name: "Python for Everbody Specialization",
            date: new Date(2020, 5),
            path: "documents/python-specialization-credential.pdf",
            image_id: 3,
            issuers_id: [4, 1]
        },
        {
            name: "PHP Course",
            date: new Date(2020, 3),
            path: "documents/php-credential.pdf",
            image_id: 4,
            issuers_id: [5]
        },
        {
            name: "Web Design Course",
            date: new Date(2020, 3),
            path: "documents/web-design-credential.pdf",
            image_id: 4,
            issuers_id: [5]
        }
    ];
})(CertificatesTable || (CertificatesTable = {}));
var ExperiencesTable;
(function (ExperiencesTable) {
    function Select(index) {
        return entries[index];
    }
    ExperiencesTable.Select = Select;
    function Count() {
        return entries.length;
    }
    ExperiencesTable.Count = Count;
    var entries = [
        {
            position: "Electric Harness Designer",
            startingDate: new Date(2019, 9),
            endingDate: new Date(2020, 6),
            organization_id: 6,
            description: "As an electric harness designer, I was assigned to several teams to provide support in technical drawings and 3D CAD models development. Also, I provided a digital solution to aid in the design of these drawings to avoid recurrent steps of the process and help reach compliance of standards. The solution included a C# implementation through which the engineers could load a data report from their CAD design software to be analysed and then get feedback on their design in realtion to the compliance policies. Also, when determining the cost of components from different providers, another tool (a web scrapper) was developed to help gather the correct information throughout the web and reduce time in proyect cost estimations."
        },
        {
            position: "VB developer",
            startingDate: new Date(2019, 8),
            endingDate: new Date(2020, 3),
            organization_id: 7,
            description: "As a visual basic developer, I started in the company to develop a digital solution to automate the manufacture design of plastic inyection molds. The solution was a desktop application which automated the input informat from the current design, and after selecting the desired platic inyection machine, the parameters for the calculations were loaded from a local database and performed the corresponding markups on the inputs to signal the faults or possible improvements for the process. Allowing the user (design engineer) to have instant feedback on their design, select the manufacture machine more properly, and increase the quality on the resulting products."
        },
        {
            position: "BMES volunteer and main collaborator",
            startingDate: new Date(2019, 1),
            endingDate: new Date(2019, 6),
            organization_id: 8,
            description: "During the volunteer, I was the main collaborator and my role included networking and providing human resources for the society in order to develop stand up events. These was achieved through my contacts network and by investigating and getting in touch with different volunteers from other societies."
        },
        {
            position: "Process engineer intern",
            startingDate: new Date(2019, 1),
            endingDate: new Date(2019, 6),
            organization_id: 9,
            description: "As a process engineer intern, I was assigned to a team to help determine and optimize the working parameters of a 3D printer. The printer was working with a new type of polymer previously designed by another team for innovative solution in the protesis manufacture area. The printing optimization of the polymer was achieved through extensive testing for data gathering to develop a mathematic model for each parameter. After the models were obtained, the point of optimization was easily obtained."
        },
        {
            position: "Dron design international competition",
            startingDate: new Date(2019, 1),
            endingDate: new Date(2019, 6),
            organization_id: 10,
            description: "The competition consisted on a conceptual design of a drone to solve a given problematic (Search & Rescue). The design was done through the 'Design Thinking' process, and the separation of concers was achieved through separation of tasks among members of the team and mocking up the best ideas each teammate had. These decisions were made through argumentation and during online meetings of the team."
        },
        {
            position: "PrepaNet Math teacher volunteer",
            startingDate: new Date(2018, 7),
            endingDate: new Date(2018, 12),
            organization_id: 11,
            description: "As a match teacher, I was providing on math classes to low-resources people. These was people from all ages, from teenagers to adults and the class was online thorugh resources provided by the organization PrepaNet. I had a group of around 10 persons who desired to learn mostly about trigonometry and equation solving topics."
        },
        {
            position: "Data Analysis Developer",
            startingDate: new Date(2018, 5),
            endingDate: new Date(2018, 8),
            organization_id: 12,
            description: "As a data analysis developer, I was assigned the task of reestructuring a current data on a model the company already had for estimating the amount of sales to be done the next month. This was based on a set of data of previous records from the company. The implementation of the solution included the design of an interface to input the data and choose between different types of estimations (Linear, polynomial, exponential, etc), to determine a more accurate approach. This was done through VB6."
        },
        {
            position: "Community manager volunteer",
            startingDate: new Date(2018, 2),
            endingDate: new Date(2018, 8),
            organization_id: 13,
            description: "As a volunteer I was in charge of managing the social networks of the organization, as well as uploading content related to wellness and good eating habits. All of the content uploaded had to be uploaded with their corresponding information sources for veracity of the organization and to avoid plagiarism."
        },
        {
            position: "IKNEXTIA volunteer and main collaborator",
            startingDate: new Date(2018, 1),
            endingDate: new Date(2018, 6),
            organization_id: 14,
            description: "During the volunteer, I was the main collaborator reporting to the directives of the society of the different events and tasks done in name of the society. These included managing the personel and other volunteers as well as assigning them tasks and follow ups on their work and schedule. I also had to make sure proyects where achieved on schedule and that the quality of them is of what it was expected."
        },
        {
            position: "Electric motor coiling proyect",
            startingDate: new Date(2018, 1),
            endingDate: new Date(2018, 5),
            organization_id: 2,
            description: "During the proyect, I was given the hands-on tasks of coiling and repairing electric motors. These was usually done thorugh a special machinery for coiling, although manually coiling was often required."
        },
        {
            position: "General mechanic",
            startingDate: new Date(2017, 5),
            endingDate: new Date(2017, 7),
            organization_id: 15,
            description: "As a general mechanic, I had hands-on tasks such as air filter and oil replacement in several machinery such as: Air compressors, generators, tractors, etc. I also had to deal with problem solving without knowing the cause of the problem, which included a lot of critical thinking."
        },
        {
            position: "CVA Computer teacher volunteer",
            startingDate: new Date(2016, 7),
            endingDate: new Date(2016, 12),
            organization_id: 16,
            description: "As a computer teacher volunteer, I provided support in teaching about computer and technology usage to adults of age above 40s that struggled to learn about these resources. The knowledge aquired help them organize their virtual documents, understand the technological terms as well as learning how to use these technologies. Mostly to get in touch with their family and friends."
        }
    ];
})(ExperiencesTable || (ExperiencesTable = {}));
var ImagesTable;
(function (ImagesTable) {
    function Select(index) {
        return entries[index];
    }
    ImagesTable.Select = Select;
    function Count() {
        return entries.length;
    }
    ImagesTable.Count = Count;
    var entries = [
        {
            path: "images/logos/colorado-university.png",
            text: "..."
        },
        {
            path: "images/logos/itesm.png",
            text: "..."
        },
        {
            path: "images/logos/ibm.png",
            text: "..."
        },
        {
            path: "images/logos/michigan-university.png",
            text: "..."
        },
        {
            path: "images/logos/tecgurus.png",
            text: "..."
        },
        {
            path: "images/icons/email.png",
            text: "..."
        },
        {
            path: "images/icons/linkedin.png",
            text: "..."
        },
        {
            path: "images/icons/github.png",
            text: "..."
        },
        {
            path: "images/icons/phone.png",
            text: "..."
        },
        {
            path: "images/icons/home.png",
            text: "..."
        },
        {
            path: "images/icons/pdf.png",
            text: "..."
        },
        {
            path: "images/me.png",
            text: "..."
        },
        {
            path: "images/logos/john-deere.png",
            text: "..."
        },
        {
            path: "images/logos/bioana.png",
            text: "..."
        },
        {
            path: "images/logos/bmes.png",
            text: "..."
        },
        {
            path: "images/logos/emis.png",
            text: "..."
        },
        {
            path: "images/logos/ideea.png",
            text: "..."
        },
        {
            path: "images/logos/prepanet.png",
            text: "..."
        },
        {
            path: "images/logos/negocio360.png",
            text: "..."
        },
        {
            path: "images/logos/clinicas-azucar.png",
            text: "..."
        },
        {
            path: "images/logos/iknextia.png",
            text: "..."
        },
        {
            path: "images/logos/itesm.png",
            text: "..."
        },
        {
            path: "images/logos/dimex.png",
            text: "..."
        },
        {
            path: "images/logos/cva.png",
            text: "..."
        },
        {
            path: "images/flags/spanish.png",
            text: "..."
        },
        {
            path: "images/flags/english.png",
            text: "..."
        },
        {
            path: "images/flags/germany.png",
            text: "..."
        },
        {
            path: "images/flags/italian.png",
            text: "..."
        },
        {
            path: "images/stack/c-sharp.png",
            text: "..."
        },
        {
            path: "images/stack/vb.png",
            text: "..."
        },
        {
            path: "images/stack/javascript.png",
            text: "..."
        },
        {
            path: "images/stack/css.png",
            text: "..."
        },
        {
            path: "images/stack/html.png",
            text: "..."
        },
        {
            path: "images/stack/java.png",
            text: "..."
        },
        {
            path: "images/stack/bootstrap.png",
            text: "..."
        },
        {
            path: "images/stack/xml.png",
            text: "..."
        },
        {
            path: "images/stack/python.png",
            text: "..."
        },
        {
            path: "images/stack/php.png",
            text: "..."
        },
        {
            path: "images/tech/git.png",
            text: "..."
        },
        {
            path: "images/tech/sql.png",
            text: "..."
        },
        {
            path: "images/tech/solidworks.png",
            text: "..."
        },
        {
            path: "images/tech/ptc.png",
            text: "..."
        },
        {
            path: "images/tech/matlab.png",
            text: "..."
        },
        {
            path: "images/tech/scilab.png",
            text: "..."
        },
        {
            path: "images/tech/office.png",
            text: "..."
        }
    ];
})(ImagesTable || (ImagesTable = {}));
var OrganizationsTable;
(function (OrganizationsTable) {
    function Select(index) {
        return entries[index];
    }
    OrganizationsTable.Select = Select;
    function Count() {
        return entries.length;
    }
    OrganizationsTable.Count = Count;
    var entries = [
        {
            name: "University of Colorado",
            path: "https://www.colorado.edu/",
            image_id: 0
        },
        {
            name: "Coursera",
            path: "https://www.coursera.org/",
            image_id: 1
        },
        {
            name: "Instituto Tecnologico de Estudios Superiores de Monterrey",
            path: "https://tec.mx/en",
            image_id: 2
        },
        {
            name: "IBM",
            path: "https://www.ibm.com",
            image_id: 3
        },
        {
            name: "University of Michigan",
            path: "https://umich.edu/",
            image_id: 4
        },
        {
            name: "Tec Gurus",
            path: "https://www.tecgurus.net/",
            image_id: 5
        },
        {
            name: "John Deere",
            path: "https://www.deere.com/en/index.html",
            image_id: 12
        },
        {
            name: "Bioana",
            path: "http://www.bioana.com.mx/",
            image_id: 13
        },
        {
            name: "BioMedial Engineer Society",
            path: "https://www.bmes.org/",
            image_id: 14
        },
        {
            name: "Medical and Wellness Sciences Shcool",
            path: "http://escuelademedicina.tec.mx/",
            image_id: 15
        },
        {
            name: "International Design & Engineering Education Association",
            path: "https://ideea.network/",
            image_id: 16
        },
        {
            name: "PrepaNet @NET",
            path: "http://sitios.itesm.mx/prepanet/",
            image_id: 17
        },
        {
            name: "Negocio 360",
            path: "https://www.facebook.com/Negocio360",
            image_id: 18
        },
        {
            name: "Clinicas del azucar (Sugar clinics)",
            path: "https://www.clinicasdelazucar.com/",
            image_id: 19
        },
        {
            name: "IKNEXTIA",
            path: "https://www.facebook.com/iknextia",
            image_id: 20
        },
        {
            name: "DIMEX",
            path: "https://www.pinterest.com.mx/dimexmty/",
            image_id: 21
        },
        {
            name: "CVA - Virtual Learning Center",
            path: "http://www.centroscomunitariosdeaprendizaje.org.mx/",
            image_id: 22
        },
    ];
})(OrganizationsTable || (OrganizationsTable = {}));
var PersonalDataTable;
(function (PersonalDataTable) {
    function Select(index) {
        return entries[index];
    }
    PersonalDataTable.Select = Select;
    function Count() {
        return entries.length;
    }
    PersonalDataTable.Count = Count;
    var entries = [
        {
            title: "Email",
            content: "sebastian.mgzz@outlook.com",
            path: "mailto: sebastian.mgzz@outlook.com",
            image_id: 5
        },
        {
            title: "LinkedIn",
            content: "sebastian-mgzz",
            path: "https://www.linkedin.com/in/sebastian-mgzz/",
            image_id: 6
        },
        {
            title: "GitHub",
            content: "sebsmgzz",
            path: "https://github.com/sebsmgzz",
            image_id: 7
        },
        {
            title: "Phone",
            content: "+52 1 826 261 5753",
            path: "https://wa.me/5218262615753",
            image_id: 8
        },
        {
            title: "Location",
            content: "Monterrey, México",
            path: "https://www.google.com/maps/d/viewer?mid=1KlI_CIACu8CJXl0UqSQ6IIEaQMM&ll=25.496325587910153%2C-100.2341235&z=10",
            image_id: 9
        },
        {
            title: "Resume",
            content: "Open my CV",
            path: "documents/CV_English.pdf",
            image_id: 10
        }
    ];
})(PersonalDataTable || (PersonalDataTable = {}));
var SkillsTable;
(function (SkillsTable) {
    function Select(index) {
        return entries[index];
    }
    SkillsTable.Select = Select;
    function Count() {
        return entries.length;
    }
    SkillsTable.Count = Count;
    var entries = [
        {
            name: "Spanish native",
            description: "",
            image_id: 24
        },
        {
            name: "Proficient english",
            description: "",
            image_id: 25
        },
        {
            name: "Basic german",
            description: "",
            image_id: 26
        },
        {
            name: "Basic italian",
            description: "",
            image_id: 27
        },
        {
            name: "C Sharp",
            description: "",
            image_id: 28
        },
        {
            name: "Visual Basic",
            description: "",
            image_id: 29
        },
        {
            name: "Javascript",
            description: "",
            image_id: 30
        },
        {
            name: "CSS",
            description: "",
            image_id: 31
        },
        {
            name: "HTML",
            description: "",
            image_id: 32
        },
        {
            name: "Java",
            description: "",
            image_id: 33
        },
        {
            name: "Bootstrap",
            description: "",
            image_id: 34
        },
        {
            name: "XML",
            description: "",
            image_id: 35
        },
        {
            name: "Python",
            description: "",
            image_id: 36
        },
        {
            name: "PHP",
            description: "",
            image_id: 37
        },
        {
            name: "Git / GitHub",
            description: "",
            image_id: 38
        },
        {
            name: "SQL",
            description: "",
            image_id: 39
        },
        {
            name: "Solidworks",
            description: "",
            image_id: 40
        },
        {
            name: "CREO / PTC",
            description: "",
            image_id: 41
        },
        {
            name: "Matlab",
            description: "",
            image_id: 42
        },
        {
            name: "Scilab",
            description: "",
            image_id: 43
        },
        {
            name: "Microsoft office",
            description: "",
            image_id: 44
        }
    ];
})(SkillsTable || (SkillsTable = {}));
var CertificateModel = /** @class */ (function () {
    function CertificateModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = CertificatesTable.Count();
        //#endregion
    }
    Object.defineProperty(CertificateModel.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (v) {
            this._name = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CertificateModel.prototype, "date", {
        get: function () {
            return this._date;
        },
        set: function (v) {
            this._date = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CertificateModel.prototype, "path", {
        get: function () {
            return this._path;
        },
        set: function (v) {
            this._path = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CertificateModel.prototype, "image_id", {
        get: function () {
            return this._image_id;
        },
        set: function (v) {
            this._image_id = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CertificateModel.prototype, "issuers_id", {
        get: function () {
            return this._issuers_id;
        },
        set: function (v) {
            this._issuers_id = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    CertificateModel.prototype.parse = function (data) {
        this.name = data.name;
        this.date = data.date;
        this.image_id = data.image_id;
        this.path = data.path;
        this.issuers_id = data.issuers_id;
    };
    CertificateModel.prototype.select = function (index) {
        var data = CertificatesTable.Select(index);
        this.parse(data);
    };
    return CertificateModel;
}());
var ExperienceModel = /** @class */ (function () {
    function ExperienceModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = ExperiencesTable.Count();
        //#endregion
    }
    Object.defineProperty(ExperienceModel.prototype, "position", {
        get: function () {
            return this._position;
        },
        set: function (v) {
            this._position = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExperienceModel.prototype, "startingDate", {
        get: function () {
            return this._startingDate;
        },
        set: function (v) {
            this._startingDate = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExperienceModel.prototype, "endingDate", {
        get: function () {
            return this._endingDate;
        },
        set: function (v) {
            this._endingDate = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExperienceModel.prototype, "organization_id", {
        get: function () {
            return this._organization_id;
        },
        set: function (v) {
            this._organization_id = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ExperienceModel.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (v) {
            this._description = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    ExperienceModel.prototype.parse = function (data) {
        this.position = data.position;
        this.startingDate = data.startingDate;
        this.endingDate = data.endingDate;
        this.organization_id = data.organization_id;
        this.description = data.description;
    };
    ExperienceModel.prototype.select = function (index) {
        var data = ExperiencesTable.Select(index);
        this.parse(data);
    };
    return ExperienceModel;
}());
var ImageModel = /** @class */ (function () {
    function ImageModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = ImagesTable.Count();
        //#endregion
    }
    Object.defineProperty(ImageModel.prototype, "path", {
        get: function () {
            return this._path;
        },
        set: function (v) {
            this._path = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ImageModel.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (v) {
            this._text = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    ImageModel.prototype.parse = function (data) {
        this.path = data.path;
        this.text = data.text;
    };
    ImageModel.prototype.select = function (index) {
        var data = ImagesTable.Select(index);
        this.parse(data);
    };
    return ImageModel;
}());
var OrganizationModel = /** @class */ (function () {
    function OrganizationModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = OrganizationsTable.Count();
        //#endregion
    }
    Object.defineProperty(OrganizationModel.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (v) {
            this._name = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OrganizationModel.prototype, "path", {
        get: function () {
            return this._path;
        },
        set: function (v) {
            this._path = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OrganizationModel.prototype, "image_id", {
        get: function () {
            return this._image_id;
        },
        set: function (v) {
            this._image_id = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    OrganizationModel.prototype.parse = function (data) {
        this.name = data.name;
        this.path = data.path;
        this.image_id = data.image_id;
    };
    OrganizationModel.prototype.select = function (index) {
        var data = OrganizationsTable.Select(index);
        this.parse(data);
    };
    return OrganizationModel;
}());
var PersonalDataModel = /** @class */ (function () {
    function PersonalDataModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = PersonalDataTable.Count();
        //#endregion
    }
    Object.defineProperty(PersonalDataModel.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (v) {
            this._title = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonalDataModel.prototype, "content", {
        get: function () {
            return this._content;
        },
        set: function (v) {
            this._content = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonalDataModel.prototype, "path", {
        get: function () {
            return this._path;
        },
        set: function (v) {
            this._path = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PersonalDataModel.prototype, "image_id", {
        get: function () {
            return this._image_id;
        },
        set: function (v) {
            this._image_id = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    PersonalDataModel.prototype.parse = function (data) {
        this.title = data.title;
        this.content = data.content;
        this.path = data.path;
        this.image_id = data.image_id;
    };
    PersonalDataModel.prototype.select = function (index) {
        return PersonalDataTable.Select(index);
    };
    return PersonalDataModel;
}());
var SkillModel = /** @class */ (function () {
    function SkillModel() {
        //#region Properties
        //#endregion
        //#region IQueryable
        this.count = SkillsTable.Count();
        //#endregion
    }
    Object.defineProperty(SkillModel.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (v) {
            this._name = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SkillModel.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (v) {
            this._description = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SkillModel.prototype, "image_id", {
        get: function () {
            return this._image_id;
        },
        set: function (v) {
            this._image_id = v;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region IModel
    SkillModel.prototype.parse = function (data) {
        this.name = data.name;
        this.description = data.description;
        this.image_id = data.image_id;
    };
    SkillModel.prototype.select = function (index) {
        var data = SkillsTable.Select(index);
        this.parse(data);
    };
    return SkillModel;
}());
var CareerController = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function CareerController() {
        this.experience = new ExperienceModel();
        this.organization = new OrganizationModel();
        this.image = new ImageModel();
    }
    Object.defineProperty(CareerController.prototype, "organizationPath", {
        //#endregion
        //#region Properties
        /** @property {string} - The path to the organization of the scoped experience. */
        get: function () {
            return this.organization.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "imageText", {
        /** @property {string} - The alternative text to the image of the scoped experience. */
        get: function () {
            return this.image.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "imagePath", {
        /** @property {string} - The path to the image of the scoped experience. */
        get: function () {
            return this.image.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "position", {
        /** @property {string} - The position of the scoped experience. */
        get: function () {
            return this.experience.position;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "organizationName", {
        /** @property {string} - The organization name of the scoped experience. */
        get: function () {
            return this.organization.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "startingDate", {
        /** @property {Date} - The starting date of the experience of the scoped experience. */
        get: function () {
            return this.experience.startingDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "endingDate", {
        /** @property {Date} - The ending date of the experience of the scoped experience. */
        get: function () {
            return this.experience.endingDate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "description", {
        /** @property {string} - The description of the experience of the scoped experience. */
        get: function () {
            return this.experience.description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CareerController.prototype, "count", {
        //#endregion
        //#region IController
        /** @inheritdoc */
        get: function () {
            return this.experience.count;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    CareerController.prototype.scope = function (index) {
        this.experience.select(index);
        this.organization.select(this.experience.organization_id);
        this.image.select(this.organization.image_id);
    };
    return CareerController;
}());
var ContactController = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function ContactController() {
        this.personalData = new PersonalDataModel();
        this.image = new ImageModel();
    }
    Object.defineProperty(ContactController.prototype, "title", {
        //#endregion 
        //#region Properties
        /** @field {string} - The personal data title of the scoped data. */
        get: function () {
            return this.personalData.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactController.prototype, "content", {
        /** @field {string} - The personal data content of the scoped data.. */
        get: function () {
            return this.personalData.content;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactController.prototype, "reference", {
        /** @field {string} - The reference path of the scoped personal data. */
        get: function () {
            return this.personalData.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactController.prototype, "imagePath", {
        /** @field {string} - The path to the image of the scoped data.. */
        get: function () {
            return this.imagePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactController.prototype, "imageText", {
        /** @field {string} - The alternative text of the image of the scoped data. */
        get: function () {
            return this.image.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactController.prototype, "count", {
        //#endregion
        //#region IController
        /** @inheritdoc */
        get: function () {
            return this.personalData.count;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    ContactController.prototype.scope = function (index) {
        this.personalData.select(index);
        this.image.select(this.personalData.image_id);
    };
    return ContactController;
}());
var EducationController = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function EducationController() {
        this.certificate = new CertificateModel();
        this.image = new ImageModel();
        this.organizations = new Array(this.certificate.issuers_id.length);
    }
    Object.defineProperty(EducationController.prototype, "issuersCount", {
        //#endregion
        //#region Properties
        /** @property {number} - The number of issuers for the scoped certificate. */
        get: function () {
            return this.organizations.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EducationController.prototype, "logoPath", {
        /** @property {string} - The path to the image of the scoped certificate. */
        get: function () {
            return this.image.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EducationController.prototype, "logoText", {
        /** @property {string} - The alternative text of the image of the scoped certificate. */
        get: function () {
            return this.image.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EducationController.prototype, "credentialName", {
        /** @property {string} - The name of the credential of the scoped certificate.*/
        get: function () {
            return this.certificate.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EducationController.prototype, "credentialPath", {
        /** @property {string} - The path to the credential of the scoped certificate. */
        get: function () {
            return this.certificate.path;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region Methods
    /**
     * Selects the reference of the issuer with the given index.
     * @param index {number} The index of the issuer to select
     */
    EducationController.prototype.getIssuerReference = function (index) {
        return this.organizations[index].path;
    };
    /**
     * Selects the name of the issuer with the given index.
     * @param index The index of the issuer to select.
     */
    EducationController.prototype.getIssuerName = function (index) {
        return this.organizations[index].name;
    };
    Object.defineProperty(EducationController.prototype, "count", {
        //#endregion
        //#region IController
        /** @inheritdoc */
        get: function () {
            return this.certificate.count;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    EducationController.prototype.scope = function (index) {
        this.certificate.select(index);
        this.image.select(this.certificate.image_id);
        this.organizations = new Array(this.certificate.issuers_id.length);
        for (var i = 0; i < this.certificate.issuers_id.length; i++) {
            var organization = new OrganizationModel();
            organization.select(this.certificate.issuers_id[i]);
            this.organizations.push(organization);
        }
    };
    return EducationController;
}());
var SkillsController = /** @class */ (function () {
    //#endregion
    //#region Contructor
    function SkillsController() {
        this.skill = new SkillModel();
        this.image = new ImageModel();
    }
    Object.defineProperty(SkillsController.prototype, "imagePath", {
        //#endregion
        //#region Properties
        /** @property {string} - The path to the image of the scoped skill. */
        get: function () {
            return this.image.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SkillsController.prototype, "imageText", {
        /** @property {string} - The alternative text of the image of the scoped skill.  */
        get: function () {
            return this.image.text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SkillsController.prototype, "name", {
        /** @property {string} - The name of the scoped skill. */
        get: function () {
            return this.skill.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SkillsController.prototype, "count", {
        //#endregion
        //#region IController
        /** @inheritdoc */
        get: function () {
            return this.skill.count;
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritdoc */
    SkillsController.prototype.scope = function (index) {
        this.skill.select(index);
        this.image.select(this.skill.image_id);
    };
    return SkillsController;
}());
var CareerView = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function CareerView() {
        //#endregion
        //#region Instance fields
        /** @field Controls interactions between the view and the corresponding models. */
        this.controller = new CareerController();
        /** The root element of the view. */
        this.root = (hyperscript("div", { id: CareerView.defaultAccordionId + CareerView.spansCount, class: "accordion" }));
        CareerView.spansCount += 1;
        for (var i = 0; i < this.controller.count; i++) {
            this.controller.scope(i);
            var card = this.getScopedAccordionCard(i);
            this.root.append(card);
        }
    }
    //#endregion
    //#region Private methods
    /**
     * Formats a date to be visible attractive.
     * @param date The date to give format.
     */
    CareerView.formatDate = function (date) {
        return Utilities.getMonthName(date.getMonth()) + " " + date.getFullYear();
    };
    /**
     * Setups the element of an accordion card.
     * @param i {number} The index of the card being added.
     * @return {HTMLElement} The element representing the accordion card.
     */
    CareerView.prototype.getScopedAccordionCard = function (i) {
        return (hyperscript("div", { class: "card" },
            hyperscript("div", { id: CareerView.defaultCardHeaderId + i, class: "card-header" },
                hyperscript("h2", { class: "mb-0" }),
                hyperscript("a", { target: "_blank", class: "col-fluid", href: this.controller.organizationPath },
                    hyperscript("img", { class: "d-block mx-auto", alt: this.controller.imageText, src: this.controller.imagePath })),
                hyperscript("a", { class: "col btn btn-link btn-block", type: "button", "data-toggle": "collapse", "data-target": '#' + CareerView.defaultCardBodyId + i, "aria-expanded": "true", "aria-controls": CareerView.defaultCardBodyId + i },
                    hyperscript("h5", { class: "card-title" }, this.controller.position),
                    hyperscript("h6", { class: "card-subtitle mb-2 text-muted" }, this.controller.organizationName),
                    hyperscript("small", { class: "text-muted" },
                        CareerView.formatDate(this.controller.startingDate),
                        " -",
                        CareerView.formatDate(this.controller.endingDate)))),
            hyperscript("div", { id: CareerView.defaultCardBodyId + i, class: "collapse", "aria-labelledby": "#", "data-parent": "#" + this.root.id },
                hyperscript("div", { class: "card-body" }, this.controller.description))));
    };
    //#endregion
    //#region IView
    CareerView.prototype.render = function (element) {
        element.appendChild(this.root);
    };
    //#region Static fields
    /** @field The number of CareerViews spanned, used to achieve different ids. */
    CareerView.spansCount = 0;
    /** @field The default id of the accordion. */
    CareerView.defaultAccordionId = "careerAccordion";
    /** @field The default id of the card header id. */
    CareerView.defaultCardHeaderId = "careerAccordionCardHeader";
    /** @field The default id of the card body id. */
    CareerView.defaultCardBodyId = "careerAccordionCardBody";
    return CareerView;
}());
var ContactView = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function ContactView() {
        //#endregion
        //#region Instance fields
        this.controller = new ContactController();
        this.root = (hyperscript("div", { id: ContactView.defaultCarouselId + ContactView.spansCount, class: "carousel slide", "data-ride": "carousel" }));
        this.items = (hyperscript("div", { class: "carousel-inner" }));
        this.indicators = (hyperscript("ol", { class: "carousel-indicators" }));
        ContactView.spansCount += 1;
        for (var i = 0; i < this.controller.count; i++) {
            this.controller.scope(i);
            this.items.appendChild(this.getScopedItem(i == 0));
            this.indicators.appendChild(this.getScopedIndicator(i == 0, i));
        }
        this.root.appendChild(this.root);
        this.root.appendChild(this.indicators);
        this.root.appendChild(ContactView.previousControl);
        this.root.appendChild(ContactView.nextControl);
    }
    Object.defineProperty(ContactView, "previousControl", {
        get: function () {
            return (hyperscript("a", { class: "carousel-control-prev", href: "#contactCarousel", role: "button", "data-slide": "prev" },
                hyperscript("span", { class: "carousel-control-prev-icon", "aria-hidden": "true" }),
                hyperscript("span", { class: "sr-only" }, "Previous")));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactView, "nextControl", {
        get: function () {
            return (hyperscript("a", { class: "carousel-control-next", href: "#contactCarousel", role: "button", "data-slide": "next" },
                hyperscript("span", { class: "carousel-control-next-icon", "aria-hidden": "true" }),
                hyperscript("span", { class: "sr-only" }, "Next")));
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region Private methods
    ContactView.prototype.getScopedItem = function (active) {
        return (hyperscript("div", { class: "carousel-item" + (active ? "active" : "") },
            hyperscript("div", { class: "carousel-caption d-md-block" },
                hyperscript("h5", null, this.controller.title),
                hyperscript("p", null, this.controller.content),
                hyperscript("a", { href: this.controller.reference, target: "_blank" },
                    hyperscript("img", { src: this.controller.imagePath, alt: this.controller.imageText })))));
    };
    ContactView.prototype.getScopedIndicator = function (active, slideToIndex) {
        return (hyperscript("li", { "data-target": "#" + this.root.id, "data-slide-to": slideToIndex, class: (active) ? "active" : "" }));
    };
    //#endregion
    //#region IView
    ContactView.prototype.render = function (element) {
        element.appendChild(this.root);
    };
    //#region Static fields
    ContactView.spansCount = 0;
    ContactView.defaultCarouselId = "contactCarousel";
    return ContactView;
}());
var EducationView = /** @class */ (function () {
    //#endregion
    //#region Constructor
    function EducationView() {
        /** @field The root element of the view. */
        this.root = (hyperscript("div", { class: "card-deck row row-cols-1 row-cols-md-3" }));
        this.controller = new EducationController();
        for (var i = 0; i < this.controller.count; i++) {
            this.controller.scope(i);
            var scopedIssuers = EducationView.defaultIssuersRoot;
            for (var j = 0; j < this.controller.issuersCount; j++) {
                scopedIssuers.appendChild(this.getScopedIssuer(j));
            }
            this.root.appendChild(scopedIssuers);
        }
    }
    //#endregion
    //#region Methods
    /**
     * Setups the card element of the deck
     * @param issuersElement {HTMLElement} The issuers element to add to the card.
     * @return {HTMLElement} THe element containing the skill.
     */
    EducationView.prototype.getScopedCard = function (issuersElement) {
        return (hyperscript("div", { class: "col my-2" },
            hyperscript("div", { class: "card" },
                hyperscript("img", { src: this.controller.logoPath, alt: this.controller.logoText }),
                hyperscript("div", { class: "card-body" },
                    hyperscript("h5", { class: "card-title" }, this.controller.credentialName),
                    hyperscript("a", { href: this.controller.credentialPath, target: "_blank", class: "card-link" }, "View credential"),
                    issuersElement))));
    };
    /**
     * Setupds the issuers on scope.
     * @param index The index of the issuer to add.
     * @return {HTMLElement} THe element containing the issuer.
     */
    EducationView.prototype.getScopedIssuer = function (index) {
        return (hyperscript("a", { href: this.controller.getIssuerReference(index), target: "_blank" }, this.controller.getIssuerName(index)));
    };
    //#endregion
    //#region IView
    EducationView.prototype.render = function (element) {
        element.appendChild(this.root);
    };
    //#region Static Fields
    /** @field The default root element for the issuers. */
    EducationView.defaultIssuersRoot = (hyperscript("p", { class: "card-text", display: "unset" }, "Issueres: "));
    return EducationView;
}());
var ProfileView = /** @class */ (function () {
    function ProfileView() {
    }
    //#endregion
    //#region IView
    /** @inheritdoc */
    ProfileView.prototype.render = function (element) {
        element.appendChild(ProfileView.root);
    };
    //#region Static fields
    /** @field {HTMLElement} - The root element of the profile view. */
    ProfileView.root = (hyperscript("div", { class: "row jumbotron jumbotron-fluid" },
        hyperscript("div", { class: "col-sm" },
            hyperscript("img", { class: "d-block mx-auto", src: "TODO: this", alt: "TODO: this" })),
        hyperscript("div", { class: "col-md title-text" },
            hyperscript("h1", { class: "display-4" }, "Sebasti\u00E1n Maro\u00F1as Gonz\u00E1lez"),
            hyperscript("div", { class: "col-md title-text" },
                hyperscript("p", { class: "lead" }, "Bachelor of Engineering in Mechanic Electrics"),
                hyperscript("p", { class: "lead" }, ".NET developer")))));
    return ProfileView;
}());
var SkillsView = /** @class */ (function () {
    //#endregion
    //#region Contructor
    function SkillsView() {
        /** @field {HTMLElement} -  The root element of the view. */
        this.root = (hyperscript("ul", { class: "list-group" }));
        this.controller = new SkillsController();
        for (var i = 0; i < this.controller.count; i++) {
            this.root.appendChild(this.getScopedSkill());
        }
    }
    //#endregion
    //#region Methods
    /** Setups the scoped skill element
     * @returns {HTMLElement} The element containing skill.
     */
    SkillsView.prototype.getScopedSkill = function () {
        return (hyperscript("li", { class: "list-group-item" },
            hyperscript("img", { src: this.controller.imagePath, alt: this.controller.imageText }),
            hyperscript("span", { class: "align-middle" }, this.controller.name)));
    };
    //#endregion
    //#region IView
    /** @inheritdoc */
    SkillsView.prototype.render = function (element) {
        element.appendChild(this.root);
    };
    return SkillsView;
}());
